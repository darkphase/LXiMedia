--- ixml/src/ixmlparser.c	2013-11-15 17:01:35.000000000 +0100
+++ ixml/src/ixmlparser.c	2014-02-12 22:05:31.291516810 +0100
@@ -49,8 +49,8 @@
 #include <string.h>
 
 
-#ifdef WIN32
-	#define strncasecmp strnicmp
+#if defined(WIN32) && (!defined(__GNUC__) || (__GNUC__ < 4))
+        #define strncasecmp strnicmp
 #endif
 
 
--- threadutil/inc/ThreadPool.h	2012-03-26 18:49:42.000000000 +0200
+++ threadutil/inc/ThreadPool.h	2014-02-12 22:05:31.291516810 +0100
@@ -47,12 +47,16 @@
 
 #ifdef WIN32
 	#include <time.h>
-	struct timezone
-	{
-		int  tz_minuteswest; /* minutes W of Greenwich */
-		int  tz_dsttime;     /* type of dst correction */
-	};
-	int gettimeofday(struct timeval *tv, struct timezone *tz);
+        #if !defined(__GNUC__) || (__GNUC__ < 4)
+        struct timezone
+        {
+                int  tz_minuteswest; /* minutes W of Greenwich */
+                int  tz_dsttime;     /* type of dst correction */
+        };
+        int gettimeofday(struct timeval *tv, struct timezone *tz);
+        #else
+                #define gettimeofday mingw_gettimeofday
+        #endif
 #else /* WIN32 */
 	#include <sys/param.h>
 	#include <sys/time.h> /* for gettimeofday() */
--- threadutil/src/ThreadPool.c	2012-04-03 15:01:15.000000000 +0200
+++ threadutil/src/ThreadPool.c	2014-02-12 22:06:06.279517810 +0100
@@ -415,12 +415,14 @@
 	struct timeval t;
   
 	gettimeofday(&t, NULL);
-#if defined(WIN32)
+#if defined(WIN32) && (!defined(__GNUC__) || (__GNUC__ < 4))
 	srand((unsigned int)t.tv_usec + (unsigned int)ithread_get_current_thread_id().p);
+#elif defined(WIN32) && defined(__GNUC__) && (__GNUC__ >= 4)
+        srand((unsigned int)t.tv_usec + (unsigned int)ithread_get_current_thread_id());
 #elif defined(BSD) || defined(__OSX__) || defined(__APPLE__) || defined(__FreeBSD_kernel__)
 	srand((unsigned int)t.tv_usec + (unsigned int)ithread_get_current_thread_id());
 #elif defined(__linux__) || defined(__sun) || defined(__CYGWIN__) || defined(__GLIBC__)
-	srand((unsigned int)t.tv_usec + (unsigned int)ithread_get_current_thread_id());
+        srand((unsigned int)t.tv_usec + (unsigned int)ithread_get_current_thread_id());
 #else
 	{
 		volatile union {
@@ -651,11 +653,7 @@
 	rc = ithread_create(&temp, &attr, WorkerThread, tp);
 	ithread_attr_destroy(&attr);
 	if (rc == 0) {
-		rc = ithread_detach(temp);
-		/* ithread_detach will return EINVAL if thread has been
-		 successfully detached by ithread_create */
-		if (rc == EINVAL)
-			rc = 0;
+        ithread_detach(temp);
 		tp->pendingWorkerThreadStart = 1;
 		/* wait until the new worker thread starts */
 		while (tp->pendingWorkerThreadStart) {
--- upnp/inc/UpnpInet.h	2012-03-26 18:49:42.000000000 +0200
+++ upnp/inc/UpnpInet.h	2014-02-12 22:05:31.291516810 +0100
@@ -15,14 +15,15 @@
 
 #ifdef WIN32
 	#include <stdarg.h>
-	#ifndef UPNP_USE_MSVCPP
-		/* Removed: not required (and cause compilation issues) */
-		#include <winbase.h>
-		#include <windef.h>
-	#endif
-	#include <winsock2.h>
+        #if !defined(UPNP_USE_MSVCPP) && (!defined(__GNUC__) || (__GNUC__ < 4))
+                /* Removed: not required (and cause compilation issues) */
+                #include <winbase.h>
+                #include <windef.h>
+        #endif
+        #include <winsock2.h>
 	#include <iphlpapi.h>
 	#include <ws2tcpip.h>
+        #include <windows.h>
 
 	#define UpnpCloseSocket closesocket
 
--- upnp/inc/upnp.h	2013-11-15 17:01:35.000000000 +0100
+++ upnp/inc/upnp.h	2014-02-12 22:05:31.291516810 +0100
@@ -52,9 +52,9 @@
  */
 #ifdef WIN32
 	#include <time.h>
-	#ifdef UPNP_USE_MSVCPP
-		#include <sys/types.h>	/* needed for off_t */
-	#endif
+        #if defined(UPNP_USE_MSVCPP) || (defined(__GNUC__) && (__GNUC__ >= 4))
+                #include <sys/types.h>	/* needed for off_t */
+        #endif
 #elif (defined(BSD) && BSD >= 199306)
 	#include <time.h>
 #else
--- upnp/src/api/UpnpString.c	2012-03-26 18:49:42.000000000 +0200
+++ upnp/src/api/UpnpString.c	2014-02-12 22:05:31.291516810 +0100
@@ -22,7 +22,7 @@
 #include <stdlib.h> /* for calloc(), free() */
 #include <string.h> /* for strlen(), strdup() */
 
-#ifdef WIN32
+#if defined(WIN32) && (!defined(__GNUC__) || (__GNUC__ < 4))
 	#define strcasecmp stricmp
 #else
 	/* Other systems have strncasecmp */
--- upnp/src/api/upnpapi.c	2013-11-15 17:01:35.000000000 +0100
+++ upnp/src/api/upnpapi.c	2014-02-12 22:05:31.291516810 +0100
@@ -3264,7 +3264,7 @@
 		}
 		if (ifname_found == 0) {
 			/* We have found a valid interface name. Keep it. */
-#ifdef UPNP_USE_MSVCPP
+#if defined(UPNP_USE_MSVCPP) || (defined(__GNUC__) && (__GNUC__ >= 4))
 			/*
 			 * Partial fix for VC - friendly name is wchar string,
 			 * but currently gIF_NAME is char string. For now try
@@ -3281,8 +3281,8 @@
 #endif
 			ifname_found = 1;
 		} else {
-#ifdef UPNP_USE_MSVCPP
-			/*
+#if defined(UPNP_USE_MSVCPP) || (defined(__GNUC__) && (__GNUC__ >= 4))
+                        /*
 			 * Partial fix for VC - friendly name is wchar string,
 			 * but currently gIF_NAME is char string. For now try
 			 * to convert it, which will work with many (but not
--- upnp/src/gena/gena_device.c	2013-11-15 17:01:35.000000000 +0100
+++ upnp/src/gena/gena_device.c	2014-02-12 22:05:31.295516810 +0100
@@ -189,7 +189,7 @@
 		destination_url->hostport.text.buff);
 
 	conn_fd = http_Connect(destination_url, &url);
-	if (conn_fd < 0)
+        if ((((int)conn_fd) == UPNP_E_OUTOF_SOCKET) || (((int)conn_fd) == UPNP_E_SOCKET_CONNECT))
 		/* return UPNP error */
 		return UPNP_E_SOCKET_CONNECT;
 	ret_code = sock_init(&info, conn_fd);
--- upnp/src/genlib/net/http/httpreadwrite.c	2013-11-15 17:01:35.000000000 +0100
+++ upnp/src/genlib/net/http/httpreadwrite.c	2014-02-12 22:05:31.295516810 +0100
@@ -58,8 +58,10 @@
 
 #ifdef WIN32
 	#include <malloc.h>
-	#define fseeko fseek
-	#define snprintf _snprintf
+        #if (!defined(__GNUC__) || (__GNUC__ < 4))
+                #define fseeko fseek
+                #define snprintf _snprintf
+        #endif
 #else
 	#include <arpa/inet.h>
 	#include <sys/types.h>
--- upnp/src/inc/upnputil.h	2012-04-29 00:32:06.000000000 +0200
+++ upnp/src/inc/upnputil.h	2014-02-12 22:05:31.295516810 +0100
@@ -126,8 +126,10 @@
 		#ifndef EADDRINUSE		/* VS2010 has this defined */
 			#define EADDRINUSE		WSAEADDRINUSE
 		#endif
-		#define strcasecmp		stricmp
-		#define strncasecmp		strnicmp
+                #if (!defined(__GNUC__) || (__GNUC__ < 4))
+                        #define strcasecmp		stricmp
+                        #define strncasecmp		strnicmp
+                #endif
 		#define sleep(a)		Sleep((a)*1000)
 		#define usleep(a)		Sleep((a)/1000)
 		#define strerror_r(a,b,c)	(strerror_s((b),(c),(a)))
--- upnp/src/inc/uri.h	2012-03-26 18:49:42.000000000 +0200
+++ upnp/src/inc/uri.h	2014-02-12 22:05:31.295516810 +0100
@@ -60,8 +60,8 @@
 	#include <netdb.h>      /* for struct addrinfo */
 #endif
 
-#ifdef WIN32
-	#define strncasecmp strnicmp
+#if defined(WIN32) && (!defined(__GNUC__) || (__GNUC__ < 4))
+        #define strncasecmp strnicmp
 #else
 	/* Other systems have strncasecmp */
 #endif
